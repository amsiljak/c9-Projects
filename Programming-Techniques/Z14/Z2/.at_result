{
    "buildhost_description": {
        "id": "lab002c01",
        "os": "Linux 2.6.32-754.2.1.el6.x86_64 x86_64\n\"CentOS release 6.10 (Final)\"\n",
        "compiler_version": "g++ (GCC) 6.2.0",
        "debugger_version": "GNU gdb (GDB) 7.12",
        "profiler_version": "valgrind-3.12.0"
    },
    "status": 4,
    "compile_result": {
        "status": 1,
        "output": "main.cpp: In member function ‘void Skladiste::UcitajIzDatoteke(const char*)’:\nmain.cpp:190:9: warning: ‘slovo’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n         if(slovo=='S')\n         ^~",
        "parsed_output": [
            {
                "type": "warning",
                "file": "main.cpp",
                "line": "190",
                "col": "9",
                "message": "'slovo' may be used uninitialized in this function",
                "output": "/tmp/buildservice/bs_2317/main.cpp:190:9: warning: ‘slovo’ may be used uninitialized in this function [-Wmaybe-uninitialized]         if(slovo=='S')         ^~",
                "code": "if(slovo=='S')"
            }
        ]
    },
    "run_result": [],
    "debug_result": [],
    "profile_result": [],
    "test_results": {
        "1": {
            "status": 5,
            "run_result": {
                "output": "",
                "duration": 0,
                "status": 3,
                "core": "/tmp/buildservice/bs_2317/core.11058"
            },
            "debug_result": {
                "output": "[New LWP 11058]\nCore was generated by `bs_test_1'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0x0000000000401a2a in Skladiste::UcitajIzDatoteke (this=0x7ffd9d87a760, ime_datoteke=0x40343a \"ABC.TXT\") at bs_test_1.cpp:190\n190\t    for(int i=0;i<kol_robe;i++) delete roba[i];\nTo enable execution of this file add\n\tadd-auto-load-safe-path /opt/gcc-6.2.0/lib64/libstdc++.so.6.0.22-gdb.py\nline to your configuration file \"$HOME/.gdbinit\".\nTo completely disable this security protection add\n\tset auto-load safe-path /\nline to your configuration file \"$HOME/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n\tinfo \"(gdb)Auto-loading safe path\"\n#0  0x0000000000401a2a in Skladiste::UcitajIzDatoteke (this=0x7ffd9d87a760, ime_datoteke=0x40343a \"ABC.TXT\") at bs_test_1.cpp:190\n#1  0x0000000000401e55 in main () at bs_test_1.cpp:241",
                "parsed_output": [
                    {
                        "file": "main.cpp",
                        "line": 184
                    }
                ]
            },
            "profile_result": {
                "output": "==11070== Memcheck, a memory error detector\n==11070== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==11070== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info\n==11070== Command: bs_test_1\n==11070== Parent PID: 11069\n==11070== \n==11070== Conditional jump or move depends on uninitialised value(s)\n==11070==    at 0x4019ED: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n==11070==    by 0x401E54: main (bs_test_1.cpp:241)\n==11070== \n==11070== Invalid read of size 8\n==11070==    at 0x401A07: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n==11070==    by 0x401E54: main (bs_test_1.cpp:241)\n==11070==  Address 0x51f1f90 is 0 bytes after a block of size 80 alloc'd\n==11070==    at 0x4A06849: operator new[](unsigned long) (vg_replace_malloc.c:423)\n==11070==    by 0x402C47: Skladiste::Skladiste(int) (bs_test_1.cpp:31)\n==11070==    by 0x401E43: main (bs_test_1.cpp:240)\n==11070== \n==11070== Invalid read of size 8\n==11070==    at 0x401A27: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n==11070==    by 0x401E54: main (bs_test_1.cpp:241)\n==11070==  Address 0x51f1fa8 is 24 bytes after a block of size 80 in arena \"client\"\n==11070== \n==11070== Invalid read of size 8\n==11070==    at 0x401A2A: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n==11070==    by 0x401E54: main (bs_test_1.cpp:241)\n==11070==  Address 0x90 is not stack'd, malloc'd or (recently) free'd\n==11070== \n==11070== \n==11070== Process terminating with default action of signal 11 (SIGSEGV)\n==11070==  Access not within mapped region at address 0x90\n==11070==    at 0x401A2A: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n==11070==    by 0x401E54: main (bs_test_1.cpp:241)\n==11070==  If you believe this happened as a result of a stack\n==11070==  overflow in your program's main thread (unlikely but\n==11070==  possible), you can try to increase the size of the\n==11070==  main thread stack using the --main-stacksize= flag.\n==11070==  The main thread stack size used in this run was 10485760.\n==11070== \n==11070== HEAP SUMMARY:\n==11070==     in use at exit: 8,840 bytes in 3 blocks\n==11070==   total heap usage: 6 allocs, 3 frees, 90,304 bytes allocated\n==11070== \n==11070== LEAK SUMMARY:\n==11070==    definitely lost: 0 bytes in 0 blocks\n==11070==    indirectly lost: 0 bytes in 0 blocks\n==11070==      possibly lost: 0 bytes in 0 blocks\n==11070==    still reachable: 8,840 bytes in 3 blocks\n==11070==         suppressed: 0 bytes in 0 blocks\n==11070== Reachable blocks (those to which a pointer was found) are not shown.\n==11070== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==11070== \n==11070== For counts of detected and suppressed errors, rerun with: -v\n==11070== Use --track-origins=yes to see where uninitialised values come from\n==11070== ERROR SUMMARY: 20 errors from 4 contexts (suppressed: 4 from 4)\n",
                "status": 3,
                "parsed_output": [
                    {
                        "type": 3,
                        "output": " Conditional jump or move depends on uninitialised value(s)\n    at 0x4019ED: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n    by 0x401E54: main (bs_test_1.cpp:241)\n",
                        "file": "main.cpp",
                        "line": 184
                    },
                    {
                        "type": 2,
                        "output": " Invalid read of size 8\n    at 0x401A07: Skladiste::UcitajIzDatoteke(char const*) (bs_test_1.cpp:190)\n    by 0x401E54: main (bs_test_1.cpp:241)\n  Address 0x51f1f90 is 0 bytes after a block of size 80 alloc'd\n    at 0x4A06849: operator new[](unsigned long) (vg_replace_malloc.c:423)\n    by 0x402C47: Skladiste::Skladiste(int) (bs_test_1.cpp:31)\n    by 0x401E43: main (bs_test_1.cpp:240)\n",
                        "file": "main.cpp",
                        "line": 184
                    }
                ]
            },
            "compile_result": {
                "status": 1,
                "output": ""
            }
        }
    },
    "queue_items": 0,
    "time": 1560954832
}